apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deploymentappName }}
  namespace: {{ .Values.nameSpace }}
spec:
  replicas: 3
  selector:
    matchLabels:
      app: {{ .Values.deploymentappName }}
      type: backend
  template:
    metadata:
      labels:
        app: {{ .Values.deploymentappName }}
        type: backend
    spec:
      containers:
      - name: {{ .Values.deploymentappName }}
        image:  {{ .Values.deploymentImage.name }}{{ .Values.deploymentImage.tag }}
        resources:
          limits:
            memory: "256Mi"
            cpu: "500m"
        ports:
        - containerPort: 5000
        envFrom:
        - configMapRef:
            name: {{ .Values.deploymentconfigMap.configMapRef.name }}
        - secretRef:
            name: {{ .Values.deploymentSecret.secretRef.name }}
        readinessProbe:
          tcpSocket:
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 20
          periodSeconds: 10
      initContainers: # init container to make sure DB is ready before we start orderapp pod
      - name: init-mydb
        image: busybox
        command: ['sh','-c','sleep 3; until nslookup {{ .Values.postgresqlsvcName }}.{{ .Values.nameSpace }}.svc.cluster.local; do echo waiting for DB; sleep 2; done;']
